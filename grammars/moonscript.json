{
  "scopeName": "source.moon",
  "name": "MoonScript",
  "fileTypes": [
    "moon"
  ],
  "firstLineMatch": "^#!.*\\bmoon",
  "foldingStartMarker": "^\\s*class\\s+\\S.*$|.*(->|=>)\\s*$|.*[\\[{]\\s*$",
  "foldingStopMarker": "^\\s*$|^\\s*[}\\]]\\s*$",
  "patterns": [
    {
      "begin": "'''",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.moon"
        }
      },
      "end": "'''",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.moon"
        }
      },
      "name": "string.quoted.heredoc.moon"
    },
    {
      "begin": "\"\"\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.moon"
        }
      },
      "end": "\"\"\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.moon"
        }
      },
      "name": "string.quoted.double.heredoc.moon",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.moon"
        },
        {
          "include": "#interpolated_moon"
        }
      ]
    },
    {
      "begin": "\\[\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.moon"
        }
      },
      "end": "\\]\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.moon"
        }
      },
      "name": "string.quoted.other.multiline.moon"
    },
    {
      "begin": "(?<!-)--",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.moon"
        }
      },
      "end": "(?:[ \\t]*\\n)",
      "name": "comment.block.moon",
      "patterns": [
        {
          "match": "@\\w*",
          "name": "storage.type.annotation.moonscript"
        }
      ]
    },
    {
      "match": "and=|or=",
      "name": "keyword.operator.assignment.moon"
    },
    {
      "match": "\\b(?<![\\.\\$])(\\b(if|then|else|elseif|export|import|from|switch|and|or|not|when|with|using|do|for|in|while|return|unless|continue|break|local)\\b)(?!\\s*:)\\b",
      "name": "keyword.control.moon"
    },
    {
      "include": "#operator"
    },
    {
      "match": "\\b(?<![\\.\\$])(function|end|repeat)(?!\\s*:)\\b",
      "name": "invalid.illegal.moon"
    },
    {
      "comment": ":a, :b = tbl   (no curly braces)",
      "match": "(:)([a-zA-Z\\$_](?:\\w|\\$)*)\\s*(,)?(?=.*(:|=(?!=)|[%\\+\\-\\*\\/]=|and=|or=|\\.\\.=))",
      "captures": {
        "1": {
          "name": "keyword.operator.moon"
        },
        "2": {
          "name": "variable.assignment.moon"
        },
        "3": {
          "name": "meta.delimiter.comma.moon"
        },
        "4": {
          "name": "keyword.operator.moon"
        }
      }
    },
    {
      "comment": "tbl = :a, :b   (no curly braces)",
      "match": "(:)([a-zA-Z\\$_](?:\\w|\\$)*)(?=,|$)",
      "captures": {
        "1": {
          "name": "keyword.operator.moon"
        },
        "2": {
          "name": "variable.assignment.moon"
        }
      }
    },
    {
      "match": "(@?[a-zA-Z\\$_](?:\\w|\\$)*(?:\\.(?:\\w|\\$)+)*)\\s*(?=(:|[^='\"!\\)]*(\\s|\\b)=(?!=)|[%\\+\\-\\*\\/]=|and=|or=|\\.\\.=))",
      "captures": {
        "1": {
          "name": "variable.assignment.moon"
        },
        "2": {
          "name": "meta.delimiter.comma.moon"
        },
        "3": {
          "name": "keyword.operator.moon"
        }
      }
    },
    {
      "begin": "\\{(?=.+?\\}\\s*(=(?!=)))",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.moon"
        }
      },
      "end": "(\\})\\s*(=(?!=))",
      "endCaptures": {
        "1": {
          "name": "meta.brace.curly.moon"
        },
        "2": {
          "name": "keyword.operator.assignment.moon"
        }
      },
      "name": "meta.destructured.object.moon",
      "patterns": [
        {
          "name": "variable.assignment.moon",
          "match": "(?:(:)|@)?[a-zA-Z\\$_](?:\\w|\\$)*(?:\\.[a-zA-Z\\$_](\\w|\\$)*)*",
          "captures": {
            "1": {
              "name": "keyword.operator.moon"
            }
          }
        },
        {
          "match": ",",
          "name": "meta.delimiter.comma.moon"
        }
      ]
    },
    {
      "include": "#function"
    },
    {
      "match": ",",
      "name": "meta.delimiter.comma.moon"
    },
    {
      "match": ":|=(?!=)|[%\\+\\-\\*\\/]=|\\.\\.=",
      "name": "keyword.operator.assignment.moon"
    },
    {
      "match": "\\b(?<!\\.)(true|false|nil)(?!\\s*[:=])\\b",
      "name": "constant.language.boolean.moon"
    },
    {
      "captures": {
        "1": {
          "name": "storage.type.class.moon"
        },
        "2": {
          "name": "entity.name.type.class.moon"
        },
        "3": {
          "name": "keyword.control.inheritance.moon"
        },
        "4": {
          "name": "entity.other.inherited-class.moon"
        }
      },
      "match": "(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?",
      "name": "meta.class.moon"
    },
    {
      "include": "#function_call"
    },
    {
      "include": "#table"
    },
    {
      "include": "#parens"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#variable_name"
    },
    {
      "include": "#string"
    },
    {
      "include": "#numeric"
    }
  ],
  "repository": {
    "brackets": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.moon"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.moon"
        }
      },
      "patterns": [
        {
          "include": "#operator"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#variable_name"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#string"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#table"
        },
        {
          "include": "#parens"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#variable_name"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#string"
        }
      ]
    },
    "interpolated_moon": {
      "patterns": [
        {
          "begin": "\\#\\{",
          "captures": {
            "0": {
              "name": "punctuation.section.embedded.moon"
            }
          },
          "end": "\\}",
          "name": "source.moon.embedded.source",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "comment": "Function parameters",
          "begin": "\\((?=[^\n]+\\)\\s*[=-]>)",
          "beginCaptures": {
            "0": {
              "name": "meta.brace.round.moon"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.moon"
            }
          },
          "name": "meta.function.parameters.moon",
          "patterns": [
            {
              "match": "([^,=\\s]+)\\s*(?=\\)|=|,)",
              "captures": {
                "1": {
                  "name": "variable.parameter.function.moon"
                }
              }
            },
            {
              "begin": "\\s*(=)\\s*",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.moon"
                }
              },
              "end": "(?=,|\\))",
              "patterns": [
                {
                  "include": "#expression"
                }
              ]
            },
            {
              "match": ",",
              "name": "meta.delimiter.comma.moon"
            }
          ]
        },
        {
          "match": "[=-]>",
          "name": "storage.type.function.moon"
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "comment": "x.@ or x.1",
          "match": "\\.(@|\\d)(?:[A-Za-z\\$_](?:\\w|\\$)*)*",
          "name": "invalid.illegal.moon"
        },
        {
          "match": "(\\.)?(@?[A-Za-z\\$_](\\w|\\$)*)(?=!|\\(\\)|\\(|[ ]+(@|\"|'|-[^ ]|#|\\(|\\{|(?!(if|then|else|elseif|and|or|from|for|in|while|unless)\\b)(\\w|\\$)))",
          "captures": {
            "1": {
              "name": "keyword.operator.accessor.moon"
            },
            "2": {
              "name": "entity.function.moon"
            }
          }
        },
        {
          "match": "(?<=\\w|\\$)!",
          "name": "keyword.operator.moon"
        }
      ]
    },
    "operator": {
      "name": "keyword.operator.moon",
      "match": "~=|%|\\^|\\*|\\/|(\\-)?\\-(?!>)|\\+|==|=(?!>)|!=|<=|>=|\\.\\.=|<|>|\\.\\.(\\.)?|\\||\\|\\|\\*=|(?<!\\()/=|%=|\\+=|\\-=|\\b(?<![\\.\\$])(and|or|not)(?!\\s*:)\\b"
    },
    "numeric": {
      "match": "(?<!\\$)\\b((0([box])[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?))\\b",
      "name": "constant.numeric.moon"
    },
    "parens": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.moon"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.moon"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "comment": "single quoted strings",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.moon"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.moon"
            }
          },
          "name": "string.quoted.single.moon",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.moon"
            }
          ]
        },
        {
          "comment": "double quoted strings",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.moon"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.moon"
            }
          },
          "name": "string.quoted.double.moon",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.moon"
            },
            {
              "include": "#interpolated_moon"
            }
          ]
        }
      ]
    },
    "table": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.curly.moon"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "meta.brace.curly.moon"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "variable_name": {
      "patterns": [
        {
          "comment": "Instance variables like @foo",
          "match": "(@)([a-zA-Z_\\$](\\w|\\$)*)?",
          "name": "variable.instance.moon"
        },
        {
          "comment": "the A/B in A.B.C",
          "name": "variable.object.moon",
          "match": "(?<!\\.)[a-zA-Z\\$_](\\w|\\$)*(?=\\.)"
        },
        {
          "comment": "the C in A.B.C",
          "match": "(\\.)([a-zA-Z\\$_](\\w|\\$)*)",
          "captures": {
            "1": {
              "name": "keyword.operator.accessor.moon"
            },
            "2": {
              "name": "variable.property.moon"
            }
          }
        },
        {
          "name": "variable.moon",
          "match": "[a-zA-Z\\$_](\\w|\\$)*"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "match": "\\\\[wWsSdD]|\\.",
          "name": "constant.character.character-class.regexp"
        },
        {
          "match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)",
          "name": "constant.character.numeric.regexp"
        },
        {
          "match": "\\\\c[A-Z]",
          "name": "constant.character.control.regexp"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape.backslash.regexp"
        }
      ]
    },
    "heregexp": {
      "patterns": [
        {
          "match": "\\\\[bB]|\\^|\\$",
          "name": "keyword.control.anchor.regexp"
        },
        {
          "match": "\\\\[1-9]\\d*",
          "name": "keyword.other.back-reference.regexp"
        },
        {
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??",
          "name": "keyword.operator.quantifier.regexp"
        },
        {
          "begin": "(\\()((\\?=)|(\\?!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "name": "meta.group.assertion.regexp",
          "patterns": [
            {
              "include": "#heregexp"
            }
          ]
        },
        {
          "begin": "\\((\\?:)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "name": "meta.group.regexp",
          "patterns": [
            {
              "include": "#heregexp"
            }
          ]
        },
        {
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "name": "constant.other.character-class.set.regexp",
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              },
              "match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
              "name": "constant.other.character-class.range.regexp"
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        },
        {
          "include": "#interpolated_moon"
        },
        {
          "include": "#embedded_comment"
        }
      ]
    }
  }
}
